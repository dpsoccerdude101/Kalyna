export const handleParent = (action, typeArg) => {
  const type = findParentObject(typeArg);
  const typeSetter = findParentSetter(typeArg);
  switch (action) {
    case "add":
      {
        let length = Object.keys(type).length + 1;
        let parentCopy = JSON.parse(JSON.stringify(type));
        parentCopy[length] = parentTemplate;
        typeSetter(parentCopy);
      }
      break;
    case "remove":
      {
        let length = Object.keys(type).length;
        let parentCopy = JSON.parse(JSON.stringify(type));
        delete parentCopy[length];
        typeSetter(parentCopy);
      }
      break;
    default: {
      alert(
        "There seems to be an error in adding or removing additional parents."
      );
    }
  }
};

export const handleStudent = (type) => {
  switch (type) {
    case "add":
      {
        let length = Object.keys(students).length + 1;
        let studentsCopy = JSON.parse(JSON.stringify(students));
        studentsCopy[length] = studentTemplate;
        setStudents(studentsCopy);
      }
      break;
    case "remove":
      {
        let length = Object.keys(students).length;
        let studentsCopy = JSON.parse(JSON.stringify(students));
        delete studentsCopy[length];
        setStudents(studentsCopy);
      }
      break;
    default: {
      alert(
        "There seems to be an error in adding or removing additional students."
      );
    }
  }
};
